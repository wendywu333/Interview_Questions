/**
 * 
 */
package LeetCode;

/**
 * @author Wenzhe
 * @date 4/5/2013
 * 
 */
public class Binary_Tree_Maximum_Path_Sum {

	public int maxPathSum(TreeNode root) {

		int[] res = dfs(root);
		return res[0];
	}

	public int[] dfs(TreeNode root) {

		int[] res = new int[2];
		if (root == null) {
			res[0] = 0;
			res[1] = 0;
			return res;
		}
		int[] l = dfs(root.left);
		int[] r = dfs(root.right);
		int m = Math.max(l[0], r[0]);
		int v = root.val;

		if (l[1] == 1 && r[1] == 1) {

			if (Math.max(Math.max(v, m), v + m) == v) {
				res[0] = v;
				res[1] = 1;
			} else if (Math.max(Math.max(v, m), v + m) == m) {
				res[0] = m;
				res[1] = 0;
			} else {
				res[0] = v + m;
				res[1] = 1;
			}

		} else if (l[1] == 0 && r[1] == 0) {

			if (v >= m) {
				res[0] = v;
				res[1] = 1;
			} else {
				res[0] = m;
				res[1] = 0;
			}

		} else if (l[1] == 1 && r[1] == 0) {

			if (Math.max(Math.max(v, m), v + l[0]) == v) {
				res[0] = v;
				res[1] = 1;
			} else if (Math.max(Math.max(v, m), v + l[0]) == m) {
				res[0] = m;
				res[1] = 0;
			} else {
				res[0] = v + l[0];
				res[1] = 1;
			}

		} else {
			if (Math.max(Math.max(v, m), v + r[0]) == v) {
				res[0] = v;
				res[1] = 1;
			} else if (Math.max(Math.max(v, m), v + r[0]) == m) {
				res[0] = m;
				res[1] = 0;
			} else {
				res[0] = v + r[0];
				res[1] = 1;
			}

		}

		return res;

	}
}
