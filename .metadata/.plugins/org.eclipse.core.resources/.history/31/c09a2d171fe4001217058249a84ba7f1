/**
 * 
 */
package LeetCode;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.PriorityQueue;

/**
 * @author Wenzhe
 * @date Jul 2, 2013
 * 
 */
public class Minimum_Window_Substring {

	public String minWindow(String S, String T) {
		// Start typing your Java solution below
		// DO NOT write main() function
		// Given a string S and a string T, find the minimum window in S which
		// will contain all the characters in T in complexity O(n).
		PriorityQueue<Integer> min = new PriorityQueue<Integer>();
		int minlength = Integer.MAX_VALUE;
		int startIndex = -1;
		
		HashMap<Character, Integer> ht = new HashMap<Character, Integer>();
		HashMap<Character, LinkedList> ht2 = new HashMap<Character, LinkedList>();
		
		for(int j = 0;j<T.length();j++){
			
		}
		
		for (int i = 0; i < S.length(); i++) {

		}

		return "";
	}

}
