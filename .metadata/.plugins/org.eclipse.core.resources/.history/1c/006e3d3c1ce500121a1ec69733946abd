/**
 * 
 */
package LeetCode;

import java.util.ArrayList;

/**
 * @author Wenzhe
 * @date Jul 4, 2013
 * 
 */
public class Palindrome_Partitioning_II {

	public int minCut(String s) {
		// Start typing your Java solution below
		// DO NOT write main() function

		if (s == null || s.length() == 0)
			return 0;

		int n = s.length();
		boolean a[][] = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			a[i][i] = true;
			if (i != n - 1) {
				if (s.charAt(i) == s.charAt(i + 1)) {
					a[i][i + 1] = true;
				}
			}
		}
		for (int len = 3; len <= n; len++) {
			for (int i = 0; i <= n - len; i++) {
				int j = i + len - 1;
				if (s.charAt(j) == s.charAt(i) && a[i + 1][j - 1])
					a[i][j] = true;
			}
		}
		int minCut = Integer.MAX_VALUE;
		
		int[] min = new int[n];
		min[0] = 0;

		for (int i = 0; i < n; i++) {
			
		}

		return minCut;
	}

}

// public class Palindrome_Partitioning_II {
//
// public int minCut(String s) {
// // Start typing your Java solution below
// // DO NOT write main() function
//
// if (s == null || s.length() == 0)
// return 0;
//
// int n = s.length();
// boolean a[][] = new boolean[n][n];
// for (int i = 0; i < n; i++) {
// a[i][i] = true;
// if (i != n - 1) {
// if (s.charAt(i) == s.charAt(i + 1)) {
// a[i][i + 1] = true;
// }
// }
// }
// for (int len = 3; len <= n; len++) {
// for (int i = 0; i <= n - len; i++) {
// int j = i + len - 1;
// if (s.charAt(j) == s.charAt(i) && a[i + 1][j - 1])
// a[i][j] = true;
// }
// }
// int[] min = new int[1];
// min[0] = Integer.MAX_VALUE;
// int cut = 0;
//
// backTracking(s, a, min, cut, 0, n);
//
// return min[0] - 1;
// }
//
// private boolean backTracking(String s, boolean[][] a, int[] min, int cut,
// int cur, int len) {
//
// if (cur == len) {
// if (cut < min[0])
// min[0] = cut;
// return false;
// }
// for (int j = cur; j < len; j++) {
// if (a[cur][j] == true) {
// cut++;
// boolean b = backTracking(s, a, min, cut, j + 1, len);
// if (!b) {
// cut--;
// }
// }
// }
// return false;
//
// }
//
// }
