/**
 * 
 */
package LeetCode;

import java.util.ArrayList;

/**
 * @author Wenzhe
 * @date Jul 4, 2013
 * 
 */
public class Palindrome_Partitioning {

	public ArrayList<ArrayList<String>> partition(String s) {
		// Start typing your Java solution below
		// DO NOT write main() function
		if (s == null || s.length() == 0)
			return null;

		int n = s.length();
		boolean a[][] = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			a[i][i] = true;
			if (i != n - 1) {
				if (s.charAt(i) == s.charAt(i + 1)) {
					a[i][i + 1] = true;
				}
			}
		}

		for (int len = 3; len <= n; len++) {
			for (int i = 0; i <= n - len; i++) {
				int j = i + len - 1;
				if (s.charAt(j) == s.charAt(i) && a[i + 1][j - 1])
					a[i][j] = true;
			}
		}

		ArrayList<ArrayList<String>> res = new ArrayList<ArrayList<String>>();
		ArrayList<String> aRes = new ArrayList<String>();

		backTracking(a, res, aRes, 0, n);

		return res;

	}

	private void backTracking(boolean[][] a, ArrayList<ArrayList<String>> res,
			ArrayList<String> aRes, int cur, int len) {

		if (cur == len) {
			res.add(aRes);
			aRes = new ArrayList<String>();
		}

		for (int j = cur; j < len; j++) {

		}

	}
}
