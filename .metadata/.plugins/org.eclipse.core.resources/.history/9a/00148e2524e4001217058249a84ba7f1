/**
 * 
 */
package LeetCode;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.PriorityQueue;

/**
 * @author Wenzhe
 * @date Jul 2, 2013
 * 
 */
public class Minimum_Window_Substring {

	@SuppressWarnings("unchecked")
	public String minWindow(String S, String T) {
		// Start typing your Java solution below
		// DO NOT write main() function
		// Given a string S and a string T, find the minimum window in S which
		// will contain all the characters in T in complexity O(n).
		PriorityQueue<Integer> min = new PriorityQueue<Integer>();
		int minlength = Integer.MAX_VALUE;
		int startIndex = -1;

		HashMap<Character, Integer> ht = new HashMap<Character, Integer>();
		HashMap<Character, LinkedList> ht2 = new HashMap<Character, LinkedList>();

		for (int j = 0; j < T.length(); j++) {
			if (ht.containsKey(T.charAt(j))) {
				ht.put(T.charAt(j), ((int) ht.get(T.charAt(j)) + 1));
			} else {
				ht.put(T.charAt(j), 1);
			}
		}

		int count = T.length();

		for (int i = 0; i < S.length(); i++) {

			char c = S.charAt(i);

			if (ht.containsKey(c)) {

				if (count > 0) {
					if (!ht2.containsKey(c)) {
						LinkedList<Integer> ll = new LinkedList<Integer>();
						ll.add(i);
						ht2.put(c, ll);
						min.add(i);
						count--;
					} else {
						LinkedList<Integer> temp = (LinkedList<Integer>) ht2
								.get(c);
						temp.add(i);
						ht2.put(c, temp);
						count--;
					}

					if (count == 0) {
						startIndex = min.peek();
						minlength = i - startIndex + 1;
					}

				} else { // if count = 0

					LinkedList<Integer> temp = (LinkedList<Integer>) ht2.get(c);

					if (min.peek() == temp.getFirst()) {

						min.poll();
						min.add(temp.getFirst());
						if (i - min.peek() + 1 < minlength) {
							minlength = i - min.peek() + 1;
							startIndex = min.peek();
						}

					} else {
						min.remove(temp.getFirst());
					}

					temp.removeFirst();
					temp.add(i);
					ht2.put(c, temp);

				}

			}

		}

		if (count > 0)
			return "";

		return S.substring(startIndex, startIndex + minlength);
	}

}
