/**
 * 
 */
package LeetCode;

import java.util.ArrayList;

/**
 * @author Wenzhe
 * @date Jul 4, 2013
 * 
 */
public class Palindrome_Partitioning_II {

	public int minCut(String s) {
		// Start typing your Java solution below
		// DO NOT write main() function

		
		
		if (s == null || s.length() == 0)
			return 0;

		int n = s.length();
		boolean a[][] = new boolean[n][n];
		for (int i = 0; i < n; i++) {
			a[i][i] = true;
			if (i != n - 1) {
				if (s.charAt(i) == s.charAt(i + 1)) {
					a[i][i + 1] = true;
				}
			}
		}

		for (int len = 3; len <= n; len++) {
			for (int i = 0; i <= n - len; i++) {
				int j = i + len - 1;
				if (s.charAt(j) == s.charAt(i) && a[i + 1][j - 1])
					a[i][j] = true;
			}
		}

		int[] min = new int[1];
		min[0] = Integer.MAX_VALUE;
		int cut = 0;

		backTracking(s, a, min,cut, 0, n);

		return min[0];

	}

	private boolean backTracking(String s, boolean[][] a,
			int[] min,int cut, int cur,
			int len) {

		if (cur == len) {
			if(cut < min[0]) min[0] = cut;
			res.add(new ArrayList<String>(aRes));
			return false;
		}

		for (int j = cur; j < len; j++) {
			if (a[cur][j] == true) {
				aRes.add(s.substring(cur, j + 1));
				boolean b = backTracking(s, a, res, aRes, j + 1, len);
				if (!b) {
					aRes.remove(aRes.size() - 1);
				}
			}
		}

		return false;

	}


}
