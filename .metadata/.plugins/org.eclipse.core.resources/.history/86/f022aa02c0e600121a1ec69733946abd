/**
 * 
 */
package LeetCode;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Wenzhe
 * @date Jul 6, 2013
 * 
 */
public class Combination_Sum_II {

	public ArrayList<ArrayList<Integer>> combinationSum2(int[] num, int target) {
		// Start typing your Java solution below
		// DO NOT write main() function
		ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
		res.add(new ArrayList<Integer>());
		Arrays.sort(num);

		return recurCombSum2(num, target, 0, res);

	}

	private ArrayList<ArrayList<Integer>> recurCombSum2(int[] num, int target,
			int i, ArrayList<ArrayList<Integer>> prev) {
		// TODO Auto-generated method stub
		ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
		if (target == 0) {
			for (ArrayList<Integer> temp : prev) {
				ArrayList<Integer> temp1 = new ArrayList<Integer>(temp);
				res.add(temp1);
			}
			return res;
		}

		for (int j = i; j < num.length; j++) {
			if (num[j] > target)
				break;
			for (ArrayList<Integer> temp : prev) {
				temp.add(num[j]);
			}
			ArrayList<ArrayList<Integer>> next = recurCombSum2(num, target
					- num[j], j + 1, prev);
			if (next.size() > 0) {
				res.addAll(next);
			}
			for (ArrayList<Integer> temp : prev)
				temp.remove(temp.size() - 1);

		}

		return res;
	}

}
